<?php

/**
 * Implementation of hook_help().
 */
function email_notifications_help($path, $arg) {
  switch ($path) {
    case 'admin/help#email_notifications':
      $output = '<p>' . t('The email notification module allows administrators to setup email notifications to notify specific content managers when content has been added, changed, or deleted. Each notification can be customized to only send notifications for specific organic groups, for specific content types, based on specific actions.') . '</p>';
      $output .= '<p>' . t('Users with the "manage email notifications" permission can utilize this functionality.') . '</p>';

      return $output;
  }
}


/**
 * Implementation of hook_permission().
 */
function email_notifications_permission() {
  return array(
    'manage email notifications' => array(
      'title' => t('Manage Email Notifications'),
      'description' => t('Allows management of email notifications.'),
    ),
  );
}


/**
 * Implementation of hook_menu().
 */
function email_notifications_menu() {

  $items = array();

  $items['admin/config/content/email-notifications'] = array(
    'title' => 'Manage Email Notifications',
    'description' => 'Configure email notifications to be sent when content is modified.',
    'page callback' => 'email_notifications_admin_settings',
    'access arguments' => array('manage email notifications'),
  );

  $items['admin/config/content/email-notifications/global'] = array(
    'title' => 'Email Notification Global Settings',
    'description' => 'Global Settings for the Email Notifications module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('email_notifications_admin_settings_global'),
    'access arguments' => array('manage email notifications'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/content/email-notifications/add'] = array(
    'title' => 'Add an Email Notification',
    'description' => 'Add an email notification',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('email_notifications_add'),
    'access arguments' => array('manage email notifications'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/content/email-notifications/edit/%'] = array(
    'title' => 'Modify an Email Notification',
    'description' => 'Modify an email notification',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('email_notifications_modify', 5),
    'access arguments' => array('manage email notifications'),
  );

  $items['admin/config/content/email-notifications/delete/%'] = array(
    'title' => 'Delete an Email Notification',
    'description' => 'Delete an email notification',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('email_notifications_delete', 5),
    'access arguments' => array('manage email notifications'),
  );

  return $items;
}


/**
 * Listing all of the active email notifications.
 */
function email_notifications_admin_settings() {

  $header = array(
    array(
      'data' => t('Email Address'),
      'field' => 'i.email_address',
    ),
    array(
      'data' => t('Groups'),
    ),
    array(
      'data' => t('Content Types'),
    ),
    array(
      'data' => t('actions'),
    ),
    array(
      'data' => t('Status'),
      'field' => 'i.active',
    ),
    array(
      'data' => t('Functions'),
    ),
  );

  $query = db_select('email_notification_data', 'i')->extend('TableSort');
  $query->fields('i', array('enid', 'email_address', 'og_nid', 'content_types', 'actions', 'active'));
  $table_sort = $query->extend('TableSort')->orderByHeader($header);
  $current_query = $table_sort->execute();
  $active = variable_get('email_notifications_active', '');

  $rows = array();
  foreach ($current_query as $row) {
    $groups = unserialize($row->og_nid);
    $groups = array_diff($groups, array(0));
    $title = array();

    foreach ($groups as $g) {
      $n = node_load($g);
      $title[] = $n->title;
    }

    $content_types = unserialize($row->content_types);
    $content_types = array_diff($content_types, array(0));
    $ct = array();

    foreach ($content_types as $c) {
      $ct[] = ucwords(str_replace("_", " ", $c));
    }

    $actions = unserialize($row->actions);
    $actions = array_diff($actions, array(0));
    $at = array();

    foreach ($actions as $a) {
      $at[] = ucwords($a);
    }

    $status = ($row->active == 1) ? "Active" : "Inactive";
    $style = ($row->active == 1) ? "opacity: 1;" : "opacity: 0.5;";

    $rows[] = array('data' => array($row->email_address, theme('item_list', array('items' => $title, 'type' => 'ul',)), theme('item_list', array('items' => $ct, 'type' => 'ul',)), theme('item_list', array('items' => $at, 'type' => 'ul',)), $status, l(t('edit'), $GLOBALS['base_url'] . '/admin/config/content/email-notifications/edit/' . $row->enid) . " | " . l(t('delete'), $GLOBALS['base_url'] . '/admin/config/content/email-notifications/delete/' . $row->enid)), 'style' => array($style));
  }

  $output = '';
  if ($active != TRUE) {
    $output .= '<div class="messages error">' . t('Email notifications are turned off at a global level. <strong>No email notifications will be sent</strong>. To change this, visit the') . ' ' . l(t('global settings page'), $GLOBALS['base_url'] . '/admin/config/content/email-notifications/global') . ', or edit the settings.php file and set the <strong>$conf[\'email_notifications_active\']</strong> value to TRUE.</div><p>&nbsp;</p>';
  }

  $output .= theme('table', array('header' => $header, 'rows' => $rows, "empty" => t("No Records Found"), 'attributes' => array('id' => 'sort-table', 'class' => array('tbl-data'))));

  return $output;
}


/**
 * Global settings for email notifications.
 */
function email_notifications_admin_settings_global() {

  $form['email_notifications_active'] = array(
    '#type' => 'checkbox',
    '#title' => t('Active'),
    '#description' => t('Select if the email notifications should be turned on for this server. Generally, this should only be turned on in the production environment.'),
    '#default_value' => variable_get('email_notifications_active', ''),
  );

  return system_settings_form($form);
}


/**
 * Add new notification.
 */
function email_notifications_add() {

  $form['email_notification_introduction'] = array(
    '#markup' => '<p>' . t('Create a new notification which will send an email when content is added or modified.') . '</p>',
  );

  $form['email_notification_email_address'] = array(
    '#type' => 'textfield',
    '#title' => t('Email Address'),
    '#description' => t('Enter the email address of the person for whom the notification email should be sent.'),
    '#size' => 100,
    '#required' => TRUE,
  );

  $form['email_notification_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Email Subject'),
    '#description' => t('Enter the subject of the email notification that will be sent.'),
    '#size' => 100,
    '#required' => TRUE,
    '#default_value' => t('Content has been added/modified/deleted on your website.'),
  );

  $form['email_notification_organic_groups'] = array(
    '#type' => 'select',
    '#title' => t('Select Organic Groups'),
    '#options' => _email_notifications_get_organic_groups(),
    '#multiple' => TRUE,
    '#required' => TRUE,
    '#size' => 10,
    '#description' => t('Which Organic Groups should this notification apply to?'),
    '#attributes' => array('multiple' => 'multiple'),
  );

  $form['email_notification_content_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Select content types'),
    '#options' => _email_notifications_get_content_types(),
    '#multiple' => TRUE,
    '#required' => FALSE,
    '#size' => 10,
    '#description' => t('Which content types should this notification apply to?'),
    '#attributes' => array('multiple' => 'multiple'),
  );

  $form['email_notification_actions'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Action'),
    '#description' => t('Select the actions that will trigger the email being sent.'),
    '#multiple' => TRUE,
    '#required' => FALSE,
    '#size' => 3,
    '#options' => _email_notifications_action_list(),
  );

  $form['email_notification_active'] = array(
    '#type' => 'checkbox',
    '#title' => t('Active'),
    '#description' => t('Select whether the current notification is active or inactive.'),
    '#attributes' => array('checked' => 'checked'),
  );

  $form['email_notification_submit'] = array(
    '#type'   => 'submit',
    '#value'  => t('Create Notification'),
    '#validate' => array('email_notification_form_validate'),
    '#submit' => array('email_notification_submit_add_form'),
  );

  $form['email_notification_cancel'] = array(
    '#markup' => ' <a href="' . $GLOBALS['base_url'] . '/admin/config/content/email-notifications">' . t('Cancel') . '</a>',
  );

  return $form;
}


/**
 * Edit existing notification.
 */
function email_notifications_modify($arg1, $arg2, $arg3) {

  $query = db_select('email_notification_data', 'n');
  $query->fields('n');
  $query->condition('enid', $arg3, '=');
  $current_query = $query->execute()->fetchAll();

  if ($current_query) {

    $groups = unserialize($current_query[0]->og_nid);
    $content_types = unserialize($current_query[0]->content_types);
    $actions = unserialize($current_query[0]->actions);

    $form['email_notification_enid'] = array(
      '#type' => 'hidden',
      '#default_value' => $current_query[0]->enid,
    );

    $form['email_notification_introduction'] = array(
      '#markup' => '<p>' . t('Edit this email notification.') . '</p>',
    );

    $form['email_notification_email_address'] = array(
      '#type' => 'textfield',
      '#title' => t('Email Address'),
      '#description' => t('Enter the email address of the person for whom the notification email should be sent.'),
      '#size' => 100,
      '#required' => TRUE,
      '#default_value' => $current_query[0]->email_address,
    );

    $form['email_notification_subject'] = array(
      '#type' => 'textfield',
      '#title' => t('Email Subject'),
      '#description' => t('Enter the subject of the email notification that will be sent.'),
      '#size' => 100,
      '#required' => TRUE,
      '#default_value' => $current_query[0]->email_subject,
    );

    $form['email_notification_organic_groups'] = array(
      '#type' => 'select',
      '#title' => t('Select Organic Groups'),
      '#options' => _email_notifications_get_organic_groups(),
      '#multiple' => TRUE,
      '#required' => TRUE,
      '#size' => 10,
      '#description' => t('Which Organic Groups should this notification apply to?'),
      '#attributes' => array('multiple' => 'multiple'),
      '#default_value' => $groups,
    );

    $form['email_notification_content_types'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Select content types'),
      '#options' => _email_notifications_get_content_types(),
      '#multiple' => TRUE,
      '#required' => FALSE,
      '#size' => 10,
      '#description' => t('Which content types should this notification apply to?'),
      '#attributes' => array('multiple' => 'multiple'),
      '#default_value' => $content_types,
    );

    $form['email_notification_actions'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Action'),
      '#description' => t('Select the actions that will trigger the email being sent.'),
      '#multiple' => TRUE,
      '#required' => FALSE,
      '#size' => 3,
      '#options' => _email_notifications_action_list(),
      '#default_value' => $actions,
    );

    $form['email_notification_active'] = array(
      '#type' => 'checkbox',
      '#title' => t('Active'),
      '#description' => t('Select whether the current notification is active or inactive.'),
      '#default_value' => $current_query[0]->active,
    );

    $form['email_notification_submit'] = array(
      '#type'   => 'submit',
      '#value'  => t('Update Notification'),
      '#validate' => array('email_notification_form_validate'),
      '#submit' => array('email_notification_submit_update_form'),
    );

    $form['email_notification_cancel'] = array(
      '#markup' => ' <a href="' . $GLOBALS['base_url'] . '/admin/config/content/email-notifications">' . t('Cancel') . '</a>',
    );

    }
    else {
    $form['email_notification_error'] = array(
      '#markup' => '<p>' . t('This notification does not exist.') . '</p>',
    );
  }

   return $form;
}


/**
 * Delete notification.
 */
function email_notifications_delete($arg1, $arg2, $arg3) {

  $query = db_select('email_notification_data', 'n');
  $query->fields('n');
  $query->condition('enid', $arg3, '=');
  $current_query = $query->execute()->fetchAll();

  if ($current_query) {

    $form['email_notification_enid'] = array(
      '#type' => 'hidden',
      '#default_value' => $current_query[0]->enid,
    );

    $form['email_notification_introduction'] = array(
      '#markup' => '<p>' . t('Are you sure you want to delete the following email notification? This action cannot be undone.') . '</p><ul><li>' . $current_query[0]->email_address . '</li></ul><p>&nbsp;</p>');

    $form['email_notification_submit'] = array(
      '#type'   => 'submit',
      '#value'  => t('Yes, Delete Notification'),
      '#submit' => array('email_notification_submit_delete_form'),
    );

    $form['email_notification_cancel'] = array(
      '#markup' => ' <a href="' . $GLOBALS['base_url'] . '/admin/config/content/email-notifications">' . t('Cancel') . '</a>',
    );
  }
  else {
    $form['email_notification_error'] = array(
      '#markup' => '<p>' . t('This notification does not exist.') . '</p>',
    );
  }

  return $form;
}


/**
 * Implements hook_module_implements_alter().
 */
function email_notifications_module_implements_alter(&$implementations, $hook) {
  // Ensure this module fires last if hook_insert or hook_update is invoked.
  if ($hook == 'node_insert' || $hook == 'node_update') {
    $module = 'email_notifications';
    $group = $implementations[$module];
    unset($implementations[$module]);
    $implementations[$module] = $group;
  }
}


/**
 * List possible action options.
 */
function _email_notifications_action_list() {
  $list = array(
    'insert' => t('When new content is added'),
    'update' => t('When content is updated'),
    'delete' => t('When content is deleted'),
  );

  return $list;
}


/**
 * Get list of available content types.
 */
function _email_notifications_get_content_types() {

  $query = db_select('node_type', 'n');
  $query->fields('n', array('type', 'name'));
  $query->condition('disabled', 0);
  $query->orderBy('name', 'ASC');
  $current_query = $query->execute()->fetchAll();

  $type_list = array();
  foreach ($current_query as $row) {
    $key = $row->type;
    $value = $row->name;
    $type_list[$key] = $value;
  }

  return $type_list;
}


/**
 * Get list of Organic Groups.
 */
function _email_notifications_get_organic_groups() {

  $query = db_select('field_data_group_group', 'g');
  $query->fields('g', array('entity_id'));
  $query->fields('n', array('title', 'nid'));
  $query->leftJoin('node', 'n', 'g.entity_id = n.nid');
  $query->orderBy('n.title', 'ASC');
  $current_query = $query->execute()->fetchAll();

  $type_list = array();
  foreach ($current_query as $row) {
    $key = $row->entity_id;
    $value = $row->title;
    $type_list[$key] = $value;
  }

  return $type_list;
}


/**
 * Implements email_notification_form_validate().
 */
function email_notification_form_validate($form, $form_state) {
  if ((valid_email_address($form_state['values']['email_notification_email_address']))===FALSE) {
    form_set_error('email_notification_email_address', t('Please enter a valid email address.'));
  }
}


/**
 * Implements email_notification_submit_add_form().
 */
function email_notification_submit_add_form($form, $form_state) {

  $groups = rtrim(implode(',', $form_state['values']['email_notification_organic_groups']), ',');
  $content_types = rtrim(implode(',', $form_state['values']['email_notification_content_types']), ',');
  $actions = rtrim(implode(',', $form_state['values']['email_notification_actions']), ',');

  db_insert('email_notification_data')->fields(array(
    'email_address' => $form_state['values']['email_notification_email_address'],
    'email_subject' => $form_state['values']['email_notification_subject'],
    'og_nid' => serialize($form_state['values']['email_notification_organic_groups']),
    'content_types' => serialize($form_state['values']['email_notification_content_types']),
    'actions' => serialize($form_state['values']['email_notification_actions']),
    'active' => $form_state['values']['email_notification_active'],
  ))
  ->execute();

  drupal_set_message(t('The Email Notification was added successfully.'));
  drupal_goto($GLOBALS['base_url'] . '/admin/config/content/email-notifications');
}


/**
 * Implements email_notification_submit_update_form().
 */
function email_notification_submit_update_form($form, $form_state) {

  $groups = rtrim(implode(',', $form_state['values']['email_notification_organic_groups']), ',');
  $content_types = rtrim(implode(',', $form_state['values']['email_notification_content_types']), ',');
  $actions = rtrim(implode(',', $form_state['values']['email_notification_actions']), ',');

  db_update('email_notification_data')->fields(array(
    'email_address' => $form_state['values']['email_notification_email_address'],
    'email_subject' => $form_state['values']['email_notification_subject'],
    'og_nid' => serialize($form_state['values']['email_notification_organic_groups']),
    'content_types' => serialize($form_state['values']['email_notification_content_types']),
    'actions' => serialize($form_state['values']['email_notification_actions']),
    'active' => $form_state['values']['email_notification_active'],

  ))
  ->condition('enid', $form_state['values']['email_notification_enid'], '=')
  ->execute();

  drupal_set_message(t('The Email Notification was successfully updated.'));
  drupal_goto($GLOBALS['base_url'] . '/admin/config/content/email-notifications');
}


/**
 * Implements email_notification_submit_delete_form().
 */
function email_notification_submit_delete_form($form, $form_state) {

  db_delete('email_notification_data')
    ->condition('enid', $form_state['values']['email_notification_enid'], '=')
    ->execute();

  drupal_set_message(t('The Email Notification was successfully deleted.'));
  drupal_goto($GLOBALS['base_url'] . '/admin/config/content/email-notifications');
}


/**
 * Implementation of hook_node_update().
 */
function email_notifications_node_update($node) {
  $active = variable_get('email_notifications_active', '');
  if ($active == TRUE) {
    $title = $node->title;
    $nid = $node->nid;
    $path = drupal_get_path_alias('node/'.$node->nid.'');
    $type = $node->type;
    $user = user_load($GLOBALS['user']->uid);
    $user = $user->name;
    $date = date('F j, Y, g:i a', $node->changed);
    $count = 0;
    $groups = array();

    while (isset($node->og_group_ref['und'][$count]['target_id'])) {
      $dept = node_load($node->og_group_ref['und'][$count]['target_id']);
      $dept = $dept->title;

      $query = db_select('email_notification_data', 'n');
      $query->fields('n');
      $query->condition('og_nid', '%:"' . $node->og_group_ref['und'][$count]['target_id'] . '"%', 'like');
      $query->condition('content_types', '%:"' . $type . '";s%', 'like');
      $query->condition('actions', '%:"update";s%', 'like');
      $query->condition('active', 1, '=');
      $current_query = $query->execute();

      if ($current_query->rowCount() > 0) {
        $rows = array();
        foreach ($current_query as $row) {
          $email_content = '<p>Updates have been made to the following content on the '. $dept . ' website:</p>';
          $email_content .= '<p>Content Title: ' . $title . '</p>';
          $email_content .= '<p>Content URL: ' . $GLOBALS["base_url"] . '/' . $path . '</p>';
          $email_content .= '<p>Modified by: ' . $user . '</p>';
          $email_content .= '<p>Modified on: ' . $date . '</p>';
          $email_content .= '<p>See and compare previous revisions for this content (must be logged in):<br />' . $GLOBALS["base_url"] . '/node/' . $nid . '/revisions</p>';
          $params = array('body' => $email_content, 'subject' => $row->email_subject);
          $key = 'notification_email';
          $to = $row->email_address;
          $from = 'it-webteam@uleth.ca';
          $mail = drupal_mail('email_notifications', $key, $to, language_default(), $params, $from);
        }
      }
    $count++;
    }
  }
}


/**
 * Implementation of hook_node_insert().
 */
function email_notifications_node_insert($node) {
  $active = variable_get('email_notifications_active', '');
  if ($active == TRUE) {
    $user = $node->name;
    $title = $node->title;
    $path = drupal_get_path_alias('node/'.$node->nid.'');
    $type = $node->type;
    $date = date('F j, Y, g:i a', $node->changed);
    $count = 0;
    $groups = array();

    while (isset($node->og_group_ref['und'][$count]['target_id'])) {
      $dept = node_load($node->og_group_ref['und'][$count]['target_id']);
      $dept = $dept->title;

      $query = db_select('email_notification_data', 'n');
      $query->fields('n');
      $query->condition('og_nid', '%:"' . $node->og_group_ref['und'][$count]['target_id'] . '"%', 'like');
      $query->condition('content_types', '%:"' . $type . '";s%', 'like');
      $query->condition('actions', '%:"insert";s%', 'like');
      $query->condition('active', 1, '=');
      $current_query = $query->execute();

      if ($current_query->rowCount() > 0) {
        $rows = array();
        foreach ($current_query as $row) {
          $email_content = '<p>The following content has been added on the '. $dept . ' website:</p>';
          $email_content .= '<p>Content Title: ' . $title . '</p>';
          $email_content .= '<p>Content URL: ' . $GLOBALS["base_url"] . '/' . $path . '</p>';
          $email_content .= '<p>Added by: ' . $user . '</p>';
          $email_content .= '<p>Added on: ' . $date . '</p>';
          $params = array('body' => $email_content, 'subject' => $row->email_subject);
          $key = 'notification_email';
          $to = $row->email_address;
          $from = 'it-webteam@uleth.ca';
          $mail = drupal_mail('email_notifications', $key, $to, language_default(), $params, $from);
        }
      }
    $count++;
    }
  }
}


/**
 * Implementation of hook_node_delete().
 */
function email_notifications_node_delete($node) {
  $active = variable_get('email_notifications_active', '');
  if ($active == TRUE) {
    $title = $node->title;
    $path = drupal_get_path_alias('node/'.$node->nid.'');
    $type = $node->type;
    $user = user_load($GLOBALS['user']->uid);
    $user = $user->name;
    $date = date('F j, Y, g:i a');
    $count = 0;
    $groups = array();

    while (isset($node->og_group_ref['und'][$count]['target_id'])) {
      $dept = node_load($node->og_group_ref['und'][$count]['target_id']);
      $dept = $dept->title;

      $query = db_select('email_notification_data', 'n');
      $query->fields('n');
      $query->condition('og_nid', '%:"' . $node->og_group_ref['und'][$count]['target_id'] . '"%', 'like');
      $query->condition('content_types', '%:"' . $type . '";s%', 'like');
      $query->condition('actions', '%:"delete";s%', 'like');
      $query->condition('active', 1, '=');
      $current_query = $query->execute();

      if ($current_query->rowCount() > 0) {
        $rows = array();
        foreach ($current_query as $row) {
          $email_content = '<p>The following content has been deleted from the '. $dept . ' website:</p>';
          $email_content .= '<p>Content Title: ' . $title . '</p>';
          $email_content .= '<p>Content URL: ' . $GLOBALS["base_url"] . '/' . $path . '</p>';
          $email_content .= '<p>Delete by: ' . $user . '</p>';
          $email_content .= '<p>Deleted on: ' . $date . '</p>';
          $params = array('body' => $email_content, 'subject' => $row->email_subject);
          $key = 'notification_email';
          $to = $row->email_address;
          $from = 'it-webteam@uleth.ca';
          $mail = drupal_mail('email_notifications', $key, $to, language_default(), $params, $from);
        }
      }
    $count++;
    }
  }
}


/**
 * Implementation of hook_mail().
 */
function email_notifications_mail($key, &$message, $params) {
  switch ($key) {
    case 'notification_email':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      break;
  }
}
